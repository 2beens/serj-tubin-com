version: "3.7"

# so far used only in prometheus-grafana stack
networks:
  front-tier:
  back-tier:

services:
  mainservice:
    build:
      context: ..
      dockerfile: Dockerfile
      args:
        OPEN_WEATHER_API_KEY: todo
        SERJ_TUBIN_COM_ADMIN_USERNAME: todo
        SERJ_TUBIN_COM_ADMIN_PASSWORD_HASH: '$2a$14$tqM9zVV1bSeI3e4mBW/8DuunsnoBoQwKBXeKASl4AXpALge3/WsXi'
        SERJ_BROWSER_REQ_SECRET: todo
        SERJ_GYMSTATS_IOS_APP_SECRET: todo
        SERJ_REDIS_PASS: todo
        OTEL_SERVICE_NAME: serj-tubin-com-docker-dev
        HONEYCOMB_ENABLED: "false"
        HONEYCOMB_API_KEY: ""
        SENTRY_DSN: todo
        SERJ_TUBIN_COM_SPOTIFY_CLIENT_ID: todo
        SERJ_TUBIN_COM_SPOTIFY_CLIENT_SECRET: todo
    depends_on:
      - postgres
      - redis
    ports:
      - "9000:9000"
      - "2112:2112"
    networks:
      - back-tier

  fileservice:
    image: golang:latest
    depends_on:
      - redis
    volumes:
      - ..:/go/src/serj-tubin-com-file-service
      - ./docker-data-file-service:/file-service-data
    entrypoint: ["/bin/sh","-c"]
    command:
      - |
        go build -o bin/file-service cmd/file_service/main.go
        exec ./bin/file-service -host='0.0.0.0' -rhost='st-redis' -rootpath='/file-service-data' -log-to-stdout=true -log-file-path='/file-service-data/logs'
    ports:
      - "1987:1987"
    networks:
      - back-tier
    working_dir: /go/src/serj-tubin-com-file-service
    environment:
      SERJ_REDIS_PASS: todo
      OTEL_SERVICE_NAME: serj-tubin-com-docker-dev
      HONEYCOMB_ENABLED: "false"
      HONEYCOMB_API_KEY: ""

  # https://hub.docker.com/_/postgres
  postgres:
    image: postgres:latest
    volumes:
      # - ./docker-data-postgres:/var/lib/postgresql/data
      - ../sql:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - back-tier
    environment:
      POSTGRES_DB: serj_blogs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_HOST_AUTH_METHOD: trust

  redis:
    image: redis
    command: redis-server --appendonly yes --requirepass todo
    container_name: st-redis
    # volumes:
    #  - ./docker-data-redis:/data
    ports:
      - "6379:6379"
    networks:
      - back-tier

  adminer:
    image: adminer
    depends_on:
      - postgres
    restart: always
    ports:
      - "8088:8080"
    networks:
      - back-tier
      - front-tier

  ############ PROMETHEUS GRAFANA ##################################
  ##################################################################
  # influenced by: https://github.com/vegasbrianc/prometheus/blob/master/README.md

  prometheus:
    image: prom/prometheus:v2.36.2
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./docker-data-prometheus:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
      # - pushgateway:pushgateway
    depends_on:
      - cadvisor
      # - pushgateway
    networks:
      - back-tier
    restart: always
#    deploy:
#      placement:
#        constraints:
#          - node.hostname == ${HOSTNAME}

  grafana:
    image: grafana/grafana
    user: "472"
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - ./docker-data-grafana:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    env_file:
      - ./grafana/config.monitoring
    networks:
      - back-tier
      - front-tier
    restart: always

  alertmanager:
    image: prom/alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - back-tier
    restart: always
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
  #    deploy:
  #      placement:
  #        constraints:
  #          - node.hostname == ${HOSTNAME}

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.46.0
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      # - /var/lib/docker/:/var/lib/docker:ro
    ports:
      - "8087:8080"
    networks:
      - back-tier
    restart: always
    deploy:
      mode: global
