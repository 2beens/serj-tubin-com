// Code generated by MockGen. DO NOT EDIT.
// Source: ../middleware/rate_limiting.go

// Package misc_test is a generated GoMock package.
package misc_test

import (
	context "context"
	redis_rate "github.com/go-redis/redis_rate/v9"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRequestRateLimiter is a mock of RequestRateLimiter interface
type MockRequestRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRateLimiterMockRecorder
}

// MockRequestRateLimiterMockRecorder is the mock recorder for MockRequestRateLimiter
type MockRequestRateLimiterMockRecorder struct {
	mock *MockRequestRateLimiter
}

// NewMockRequestRateLimiter creates a new mock instance
func NewMockRequestRateLimiter(ctrl *gomock.Controller) *MockRequestRateLimiter {
	mock := &MockRequestRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRequestRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRequestRateLimiter) EXPECT() *MockRequestRateLimiterMockRecorder {
	return m.recorder
}

// Allow mocks base method
func (m *MockRequestRateLimiter) Allow(ctx context.Context, key string, limit redis_rate.Limit) (*redis_rate.Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Allow", ctx, key, limit)
	ret0, _ := ret[0].(*redis_rate.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allow indicates an expected call of Allow
func (mr *MockRequestRateLimiterMockRecorder) Allow(ctx, key, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allow", reflect.TypeOf((*MockRequestRateLimiter)(nil).Allow), ctx, key, limit)
}
