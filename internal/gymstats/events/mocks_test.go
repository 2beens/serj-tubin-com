// Code generated by MockGen. DO NOT EDIT.
// Source: handler.go

// Package events_test is a generated GoMock package.
package events_test

import (
	context "context"
	reflect "reflect"

	events "github.com/2beens/serjtubincom/internal/gymstats/events"
	gomock "github.com/golang/mock/gomock"
)

// Mockservice is a mock of service interface.
type Mockservice struct {
	ctrl     *gomock.Controller
	recorder *MockserviceMockRecorder
}

// MockserviceMockRecorder is the mock recorder for Mockservice.
type MockserviceMockRecorder struct {
	mock *Mockservice
}

// NewMockservice creates a new mock instance.
func NewMockservice(ctrl *gomock.Controller) *Mockservice {
	mock := &Mockservice{ctrl: ctrl}
	mock.recorder = &MockserviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockservice) EXPECT() *MockserviceMockRecorder {
	return m.recorder
}

// AddPainReport mocks base method.
func (m *Mockservice) AddPainReport(ctx context.Context, painReport events.PainReport) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPainReport", ctx, painReport)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPainReport indicates an expected call of AddPainReport.
func (mr *MockserviceMockRecorder) AddPainReport(ctx, painReport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPainReport", reflect.TypeOf((*Mockservice)(nil).AddPainReport), ctx, painReport)
}

// AddTrainingFinish mocks base method.
func (m *Mockservice) AddTrainingFinish(ctx context.Context, trainingFinish events.TrainingFinish) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrainingFinish", ctx, trainingFinish)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrainingFinish indicates an expected call of AddTrainingFinish.
func (mr *MockserviceMockRecorder) AddTrainingFinish(ctx, trainingFinish interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrainingFinish", reflect.TypeOf((*Mockservice)(nil).AddTrainingFinish), ctx, trainingFinish)
}

// AddTrainingStart mocks base method.
func (m *Mockservice) AddTrainingStart(ctx context.Context, trainingStart events.TrainingStart) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrainingStart", ctx, trainingStart)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrainingStart indicates an expected call of AddTrainingStart.
func (mr *MockserviceMockRecorder) AddTrainingStart(ctx, trainingStart interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrainingStart", reflect.TypeOf((*Mockservice)(nil).AddTrainingStart), ctx, trainingStart)
}

// AddWeightReport mocks base method.
func (m *Mockservice) AddWeightReport(ctx context.Context, weightReport events.WeightReport) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWeightReport", ctx, weightReport)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddWeightReport indicates an expected call of AddWeightReport.
func (mr *MockserviceMockRecorder) AddWeightReport(ctx, weightReport interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWeightReport", reflect.TypeOf((*Mockservice)(nil).AddWeightReport), ctx, weightReport)
}

// Count mocks base method.
func (m *Mockservice) Count(ctx context.Context, params events.EventParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, params)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockserviceMockRecorder) Count(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*Mockservice)(nil).Count), ctx, params)
}

// List mocks base method.
func (m *Mockservice) List(ctx context.Context, params events.ListParams) ([]*events.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, params)
	ret0, _ := ret[0].([]*events.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockserviceMockRecorder) List(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*Mockservice)(nil).List), ctx, params)
}
