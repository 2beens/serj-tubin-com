// Code generated by MockGen. DO NOT EDIT.
// Source: exercise_types_handler.go
//
// Generated by this command:
//
//	mockgen -source=exercise_types_handler.go -destination=exercise_types_mocks_test.go -package=exercises_test
//

// Package exercises_test is a generated GoMock package.
package exercises_test

import (
	context "context"
	reflect "reflect"

	file_box "github.com/2beens/serjtubincom/internal/file_box"
	exercises "github.com/2beens/serjtubincom/internal/gymstats/exercises"
	gomock "go.uber.org/mock/gomock"
)

// MockexerciseTypesRepo is a mock of exerciseTypesRepo interface.
type MockexerciseTypesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockexerciseTypesRepoMockRecorder
}

// MockexerciseTypesRepoMockRecorder is the mock recorder for MockexerciseTypesRepo.
type MockexerciseTypesRepoMockRecorder struct {
	mock *MockexerciseTypesRepo
}

// NewMockexerciseTypesRepo creates a new mock instance.
func NewMockexerciseTypesRepo(ctrl *gomock.Controller) *MockexerciseTypesRepo {
	mock := &MockexerciseTypesRepo{ctrl: ctrl}
	mock.recorder = &MockexerciseTypesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexerciseTypesRepo) EXPECT() *MockexerciseTypesRepoMockRecorder {
	return m.recorder
}

// AddExerciseType mocks base method.
func (m *MockexerciseTypesRepo) AddExerciseType(ctx context.Context, exerciseType exercises.ExerciseType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExerciseType", ctx, exerciseType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExerciseType indicates an expected call of AddExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) AddExerciseType(ctx, exerciseType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).AddExerciseType), ctx, exerciseType)
}

// AddExerciseTypeImage mocks base method.
func (m *MockexerciseTypesRepo) AddExerciseTypeImage(ctx context.Context, exerciseImage exercises.ExerciseImage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExerciseTypeImage", ctx, exerciseImage)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExerciseTypeImage indicates an expected call of AddExerciseTypeImage.
func (mr *MockexerciseTypesRepoMockRecorder) AddExerciseTypeImage(ctx, exerciseImage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExerciseTypeImage", reflect.TypeOf((*MockexerciseTypesRepo)(nil).AddExerciseTypeImage), ctx, exerciseImage)
}

// DeleteExerciseType mocks base method.
func (m *MockexerciseTypesRepo) DeleteExerciseType(ctx context.Context, exerciseTypeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExerciseType", ctx, exerciseTypeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExerciseType indicates an expected call of DeleteExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) DeleteExerciseType(ctx, exerciseTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).DeleteExerciseType), ctx, exerciseTypeID)
}

// DeleteExerciseTypeImage mocks base method.
func (m *MockexerciseTypesRepo) DeleteExerciseTypeImage(ctx context.Context, exerciseImageID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExerciseTypeImage", ctx, exerciseImageID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExerciseTypeImage indicates an expected call of DeleteExerciseTypeImage.
func (mr *MockexerciseTypesRepoMockRecorder) DeleteExerciseTypeImage(ctx, exerciseImageID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExerciseTypeImage", reflect.TypeOf((*MockexerciseTypesRepo)(nil).DeleteExerciseTypeImage), ctx, exerciseImageID)
}

// ExerciseTypeIsInUse mocks base method.
func (m *MockexerciseTypesRepo) ExerciseTypeIsInUse(ctx context.Context, exerciseTypeID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExerciseTypeIsInUse", ctx, exerciseTypeID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExerciseTypeIsInUse indicates an expected call of ExerciseTypeIsInUse.
func (mr *MockexerciseTypesRepoMockRecorder) ExerciseTypeIsInUse(ctx, exerciseTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExerciseTypeIsInUse", reflect.TypeOf((*MockexerciseTypesRepo)(nil).ExerciseTypeIsInUse), ctx, exerciseTypeID)
}

// GetExerciseType mocks base method.
func (m *MockexerciseTypesRepo) GetExerciseType(ctx context.Context, exerciseTypeID string) (exercises.ExerciseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerciseType", ctx, exerciseTypeID)
	ret0, _ := ret[0].(exercises.ExerciseType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerciseType indicates an expected call of GetExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) GetExerciseType(ctx, exerciseTypeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).GetExerciseType), ctx, exerciseTypeID)
}

// GetExerciseTypes mocks base method.
func (m *MockexerciseTypesRepo) GetExerciseTypes(ctx context.Context, params exercises.GetExerciseTypesParams) ([]exercises.ExerciseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerciseTypes", ctx, params)
	ret0, _ := ret[0].([]exercises.ExerciseType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerciseTypes indicates an expected call of GetExerciseTypes.
func (mr *MockexerciseTypesRepoMockRecorder) GetExerciseTypes(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerciseTypes", reflect.TypeOf((*MockexerciseTypesRepo)(nil).GetExerciseTypes), ctx, params)
}

// UpdateExerciseType mocks base method.
func (m *MockexerciseTypesRepo) UpdateExerciseType(ctx context.Context, exerciseType exercises.ExerciseType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExerciseType", ctx, exerciseType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExerciseType indicates an expected call of UpdateExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) UpdateExerciseType(ctx, exerciseType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).UpdateExerciseType), ctx, exerciseType)
}

// MockdiskApi is a mock of diskApi interface.
type MockdiskApi struct {
	ctrl     *gomock.Controller
	recorder *MockdiskApiMockRecorder
}

// MockdiskApiMockRecorder is the mock recorder for MockdiskApi.
type MockdiskApiMockRecorder struct {
	mock *MockdiskApi
}

// NewMockdiskApi creates a new mock instance.
func NewMockdiskApi(ctrl *gomock.Controller) *MockdiskApi {
	mock := &MockdiskApi{ctrl: ctrl}
	mock.recorder = &MockdiskApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockdiskApi) EXPECT() *MockdiskApiMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockdiskApi) Delete(ctx context.Context, fileId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, fileId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockdiskApiMockRecorder) Delete(ctx, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockdiskApi)(nil).Delete), ctx, fileId)
}

// Get mocks base method.
func (m *MockdiskApi) Get(ctx context.Context, fileId int64) (*file_box.File, *file_box.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, fileId)
	ret0, _ := ret[0].(*file_box.File)
	ret1, _ := ret[1].(*file_box.Folder)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockdiskApiMockRecorder) Get(ctx, fileId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockdiskApi)(nil).Get), ctx, fileId)
}

// GetRootFolder mocks base method.
func (m *MockdiskApi) GetRootFolder() (*file_box.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootFolder")
	ret0, _ := ret[0].(*file_box.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootFolder indicates an expected call of GetRootFolder.
func (mr *MockdiskApiMockRecorder) GetRootFolder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootFolder", reflect.TypeOf((*MockdiskApi)(nil).GetRootFolder))
}

// Save mocks base method.
func (m *MockdiskApi) Save(ctx context.Context, params file_box.SaveFileParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, params)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockdiskApiMockRecorder) Save(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockdiskApi)(nil).Save), ctx, params)
}
