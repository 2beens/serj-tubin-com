// Code generated by MockGen. DO NOT EDIT.
// Source: exercise_types_handler.go

// Package exercises_test is a generated GoMock package.
package exercises_test

import (
	context "context"
	reflect "reflect"

	exercises "github.com/2beens/serjtubincom/internal/gymstats/exercises"
	gomock "github.com/golang/mock/gomock"
)

// MockexerciseTypesRepo is a mock of exerciseTypesRepo interface.
type MockexerciseTypesRepo struct {
	ctrl     *gomock.Controller
	recorder *MockexerciseTypesRepoMockRecorder
}

// MockexerciseTypesRepoMockRecorder is the mock recorder for MockexerciseTypesRepo.
type MockexerciseTypesRepoMockRecorder struct {
	mock *MockexerciseTypesRepo
}

// NewMockexerciseTypesRepo creates a new mock instance.
func NewMockexerciseTypesRepo(ctrl *gomock.Controller) *MockexerciseTypesRepo {
	mock := &MockexerciseTypesRepo{ctrl: ctrl}
	mock.recorder = &MockexerciseTypesRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockexerciseTypesRepo) EXPECT() *MockexerciseTypesRepoMockRecorder {
	return m.recorder
}

// AddExerciseType mocks base method.
func (m *MockexerciseTypesRepo) AddExerciseType(ctx context.Context, exerciseType exercises.ExerciseType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddExerciseType", ctx, exerciseType)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddExerciseType indicates an expected call of AddExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) AddExerciseType(ctx, exerciseType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).AddExerciseType), ctx, exerciseType)
}

// DeleteExerciseType mocks base method.
func (m *MockexerciseTypesRepo) DeleteExerciseType(ctx context.Context, exerciseTypeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteExerciseType", ctx, exerciseTypeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteExerciseType indicates an expected call of DeleteExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) DeleteExerciseType(ctx, exerciseTypeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).DeleteExerciseType), ctx, exerciseTypeID)
}

// GetExerciseTypes mocks base method.
func (m *MockexerciseTypesRepo) GetExerciseTypes(ctx context.Context, params exercises.GetExerciseTypesParams) ([]exercises.ExerciseType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExerciseTypes", ctx, params)
	ret0, _ := ret[0].([]exercises.ExerciseType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExerciseTypes indicates an expected call of GetExerciseTypes.
func (mr *MockexerciseTypesRepoMockRecorder) GetExerciseTypes(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExerciseTypes", reflect.TypeOf((*MockexerciseTypesRepo)(nil).GetExerciseTypes), ctx, params)
}

// UpdateExerciseType mocks base method.
func (m *MockexerciseTypesRepo) UpdateExerciseType(ctx context.Context, exerciseType exercises.ExerciseType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateExerciseType", ctx, exerciseType)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateExerciseType indicates an expected call of UpdateExerciseType.
func (mr *MockexerciseTypesRepoMockRecorder) UpdateExerciseType(ctx, exerciseType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateExerciseType", reflect.TypeOf((*MockexerciseTypesRepo)(nil).UpdateExerciseType), ctx, exerciseType)
}
