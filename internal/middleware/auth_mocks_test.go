// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go
//
// Generated by this command:
//
//	mockgen -source=auth.go -destination=auth_mocks_test.go -package=middleware_test
//

// Package middleware_test is a generated GoMock package.
package middleware_test

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockloginChecker is a mock of loginChecker interface.
type MockloginChecker struct {
	ctrl     *gomock.Controller
	recorder *MockloginCheckerMockRecorder
}

// MockloginCheckerMockRecorder is the mock recorder for MockloginChecker.
type MockloginCheckerMockRecorder struct {
	mock *MockloginChecker
}

// NewMockloginChecker creates a new mock instance.
func NewMockloginChecker(ctrl *gomock.Controller) *MockloginChecker {
	mock := &MockloginChecker{ctrl: ctrl}
	mock.recorder = &MockloginCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockloginChecker) EXPECT() *MockloginCheckerMockRecorder {
	return m.recorder
}

// IsLogged mocks base method.
func (m *MockloginChecker) IsLogged(ctx context.Context, token string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLogged", ctx, token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLogged indicates an expected call of IsLogged.
func (mr *MockloginCheckerMockRecorder) IsLogged(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLogged", reflect.TypeOf((*MockloginChecker)(nil).IsLogged), ctx, token)
}
